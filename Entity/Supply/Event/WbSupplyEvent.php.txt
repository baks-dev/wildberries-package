<?php
/*
 *  Copyright 2022.  Baks.dev <admin@baks.dev>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

namespace BaksDev\Wildberries\Package\Entity\Supply\Event;


use BaksDev\Users\Profile\UserProfile\Type\Id\UserProfileUid;
use BaksDev\Wildberries\Package\Entity\Supply\Modify\WbSupplyModify;
use BaksDev\Wildberries\Package\Entity\Supply\WbSupply;
use BaksDev\Wildberries\Package\Entity\Supply\Wildberries\WbSupplyWildberries;
use BaksDev\Wildberries\Package\Type\Supply\Event\WbSupplyEventUid;
use BaksDev\Wildberries\Package\Type\Supply\Id\WbSupplyUid;
use Doctrine\ORM\Mapping as ORM;

use BaksDev\Core\Entity\EntityEvent;
use Exception;
use InvalidArgumentException;

/* SupplyEvent */

#[ORM\Entity]
#[ORM\Table(name: 'wb_supply_event')]
#[ORM\Index(columns: ['profile', 'status'])]
class WbSupplyEvent extends EntityEvent
{
    public const TABLE = 'wb_supply_event';
    
    /** ID */
    #[ORM\Id]
    #[ORM\Column(type: WbSupplyEventUid::TYPE)]
    protected WbSupplyEventUid $id;
    
    /** ID События */
    #[ORM\Column(type: WbSupplyUid::TYPE)]
    protected ?WbSupplyUid $supply = null;
    
    /**
     * Профиль пользователя (владелец)
     */
    #[ORM\Column(type: UserProfileUid::TYPE)]
    protected UserProfileUid $profile;
    
    /** Статус поставки */
    #[ORM\Column(type: WbSupplyStatus::TYPE)]
    protected WbSupplyStatus $status;
 
    /** Модификатор */
    #[ORM\OneToOne(mappedBy: 'event', targetEntity: WbSupplyModify::class, cascade: ['all'])]
    protected WbSupplyModify $modify;
    
    /** Поставка Wildberries */
    #[ORM\OneToOne(mappedBy: 'event', targetEntity: WbSupplyWildberries::class, cascade: ['all'])]
    protected WbSupplyWildberries $wb;
    
    public function __construct()
    {
        $this->id = new SupplyEventUid();
        $this->modify = new WbSupplyModify($this, new ModifyAction(ModifyActionEnum::NEW));
        $this->status = new SupplyStatus(SupplyStatusEnum::OPEN);
        $this->wb = new WbSupplyWildberries($this);
    }
    
    public function __clone() : void
    {
        $this->id = new SupplyEventUid();
    }
    
    /**
     * @return SupplyEventUid
     */
    public function getId() : SupplyEventUid
    {
        return $this->id;
    }
    
    /**
     * @return ?SupplyUid
     */
    public function getSupply() : ?SupplyUid
    {
        return $this->supply;
    }
    
    
    public function getWbIdentifier() : ?string
    {
        return $this->wb->getIdentifier();
    }
    
    
    public function getWbSticker() : ?string
    {
        return $this->wb->getSticker();
    }
    
    /**
     * @return UserProfileUid
     */
    public function getProfile() : UserProfileUid
    {
        return $this->profile;
    }
    
    public function setSupply(SupplyUid|WbSupply $supply) : void
    {
        $this->supply = $supply instanceof WbSupply ? $supply->getId() : $supply;
    }
    
    public function isModifyActionEquals(ModifyActionEnum $action) : bool
    {
        return $this->modify->equals($action);
    }
    
    public function isStatusEquals(SupplyStatusEnum $status) : bool
    {
        return $this->status->equals($status);
    }
    
    
    /**
     * Метод заполняет объект DTO свойствами сущности и возвращает
     * @throws Exception
     */
    public function getDto($dto) : mixed
    {
        if($dto instanceof WbSupplyEventInterface)
        {
            return parent::getDto($dto);
        }
        
        throw new InvalidArgumentException(sprintf('Class %s interface error', $dto::class));
    }
    
    /**
     * Метод присваивает свойствам значения из объекта DTO
     * @throws Exception
     */
    public function setEntity($dto) : mixed
    {
        if($dto instanceof WbSupplyEventInterface)
        {
            return parent::setEntity($dto);
        }
        
        throw new InvalidArgumentException(sprintf('Class %s interface error', $dto::class));
    }
    
    
    public function getSupplyName() : ?string
    {
        return $this->wb->getIdentifier();
    }
    
}